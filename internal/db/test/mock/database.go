// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	model "escalateservice/internal/model/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseClient is a mock of DatabaseClient interface.
type MockDatabaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseClientMockRecorder
}

// MockDatabaseClientMockRecorder is the mock recorder for MockDatabaseClient.
type MockDatabaseClientMockRecorder struct {
	mock *MockDatabaseClient
}

// NewMockDatabaseClient creates a new mock instance.
func NewMockDatabaseClient(ctrl *gomock.Controller) *MockDatabaseClient {
	mock := &MockDatabaseClient{ctrl: ctrl}
	mock.recorder = &MockDatabaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseClient) EXPECT() *MockDatabaseClientMockRecorder {
	return m.recorder
}

// AddFollow mocks base method.
func (m *MockDatabaseClient) AddFollow(follow *model.Follow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollow", follow)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFollow indicates an expected call of AddFollow.
func (mr *MockDatabaseClientMockRecorder) AddFollow(follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollow", reflect.TypeOf((*MockDatabaseClient)(nil).AddFollow), follow)
}

// AddLikePost mocks base method.
func (m *MockDatabaseClient) AddLikePost(likePost *model.LikePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLikePost", likePost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLikePost indicates an expected call of AddLikePost.
func (mr *MockDatabaseClientMockRecorder) AddLikePost(likePost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLikePost", reflect.TypeOf((*MockDatabaseClient)(nil).AddLikePost), likePost)
}

// AddPost mocks base method.
func (m *MockDatabaseClient) AddPost(post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockDatabaseClientMockRecorder) AddPost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockDatabaseClient)(nil).AddPost), post)
}

// AddReview mocks base method.
func (m *MockDatabaseClient) AddReview(review *model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockDatabaseClientMockRecorder) AddReview(review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockDatabaseClient)(nil).AddReview), review)
}

// AddSuperlikePost mocks base method.
func (m *MockDatabaseClient) AddSuperlikePost(likePost *model.SuperlikePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSuperlikePost", likePost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSuperlikePost indicates an expected call of AddSuperlikePost.
func (mr *MockDatabaseClientMockRecorder) AddSuperlikePost(likePost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSuperlikePost", reflect.TypeOf((*MockDatabaseClient)(nil).AddSuperlikePost), likePost)
}

// AddUser mocks base method.
func (m *MockDatabaseClient) AddUser(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseClientMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabaseClient)(nil).AddUser), user)
}

// BatchAddFollows mocks base method.
func (m *MockDatabaseClient) BatchAddFollows(follow []*model.Follow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddFollows", follow)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddFollows indicates an expected call of BatchAddFollows.
func (mr *MockDatabaseClientMockRecorder) BatchAddFollows(follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddFollows", reflect.TypeOf((*MockDatabaseClient)(nil).BatchAddFollows), follow)
}

// BatchAddLikePosts mocks base method.
func (m *MockDatabaseClient) BatchAddLikePosts(likePosts []*model.LikePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddLikePosts", likePosts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddLikePosts indicates an expected call of BatchAddLikePosts.
func (mr *MockDatabaseClientMockRecorder) BatchAddLikePosts(likePosts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddLikePosts", reflect.TypeOf((*MockDatabaseClient)(nil).BatchAddLikePosts), likePosts)
}

// BatchAddPosts mocks base method.
func (m *MockDatabaseClient) BatchAddPosts(posts []*model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddPosts", posts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddPosts indicates an expected call of BatchAddPosts.
func (mr *MockDatabaseClientMockRecorder) BatchAddPosts(posts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddPosts", reflect.TypeOf((*MockDatabaseClient)(nil).BatchAddPosts), posts)
}

// BatchAddReviews mocks base method.
func (m *MockDatabaseClient) BatchAddReviews(reviews []*model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddReviews", reviews)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddReviews indicates an expected call of BatchAddReviews.
func (mr *MockDatabaseClientMockRecorder) BatchAddReviews(reviews interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddReviews", reflect.TypeOf((*MockDatabaseClient)(nil).BatchAddReviews), reviews)
}

// BatchAddSuperlikePosts mocks base method.
func (m *MockDatabaseClient) BatchAddSuperlikePosts(superlikePosts []*model.SuperlikePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddSuperlikePosts", superlikePosts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddSuperlikePosts indicates an expected call of BatchAddSuperlikePosts.
func (mr *MockDatabaseClientMockRecorder) BatchAddSuperlikePosts(superlikePosts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddSuperlikePosts", reflect.TypeOf((*MockDatabaseClient)(nil).BatchAddSuperlikePosts), superlikePosts)
}

// BatchAddUsers mocks base method.
func (m *MockDatabaseClient) BatchAddUsers(users []*model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddUsers", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAddUsers indicates an expected call of BatchAddUsers.
func (mr *MockDatabaseClientMockRecorder) BatchAddUsers(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddUsers", reflect.TypeOf((*MockDatabaseClient)(nil).BatchAddUsers), users)
}

// CallProcedure mocks base method.
func (m *MockDatabaseClient) CallProcedure(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallProcedure", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallProcedure indicates an expected call of CallProcedure.
func (mr *MockDatabaseClientMockRecorder) CallProcedure(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallProcedure", reflect.TypeOf((*MockDatabaseClient)(nil).CallProcedure), name)
}

// Clean mocks base method.
func (m *MockDatabaseClient) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockDatabaseClientMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockDatabaseClient)(nil).Clean))
}

// Close mocks base method.
func (m *MockDatabaseClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseClient)(nil).Close))
}

// GetFollow mocks base method.
func (m *MockDatabaseClient) GetFollow(follower, followee string) (*model.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollow", follower, followee)
	ret0, _ := ret[0].(*model.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollow indicates an expected call of GetFollow.
func (mr *MockDatabaseClientMockRecorder) GetFollow(follower, followee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollow", reflect.TypeOf((*MockDatabaseClient)(nil).GetFollow), follower, followee)
}

// GetLikePost mocks base method.
func (m *MockDatabaseClient) GetLikePost(username, postId string) (*model.LikePost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikePost", username, postId)
	ret0, _ := ret[0].(*model.LikePost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikePost indicates an expected call of GetLikePost.
func (mr *MockDatabaseClientMockRecorder) GetLikePost(username, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikePost", reflect.TypeOf((*MockDatabaseClient)(nil).GetLikePost), username, postId)
}

// GetPost mocks base method.
func (m *MockDatabaseClient) GetPost(postId string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", postId)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockDatabaseClientMockRecorder) GetPost(postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockDatabaseClient)(nil).GetPost), postId)
}

// GetReview mocks base method.
func (m *MockDatabaseClient) GetReview(reviewId uint64) (*model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", reviewId)
	ret0, _ := ret[0].(*model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockDatabaseClientMockRecorder) GetReview(reviewId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockDatabaseClient)(nil).GetReview), reviewId)
}

// GetSuperlikePost mocks base method.
func (m *MockDatabaseClient) GetSuperlikePost(username, postId string) (*model.SuperlikePost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperlikePost", username, postId)
	ret0, _ := ret[0].(*model.SuperlikePost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperlikePost indicates an expected call of GetSuperlikePost.
func (mr *MockDatabaseClientMockRecorder) GetSuperlikePost(username, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperlikePost", reflect.TypeOf((*MockDatabaseClient)(nil).GetSuperlikePost), username, postId)
}

// GetUser mocks base method.
func (m *MockDatabaseClient) GetUser(username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaseClientMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabaseClient)(nil).GetUser), username)
}

// RemoveFollow mocks base method.
func (m *MockDatabaseClient) RemoveFollow(follow *model.Follow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFollow", follow)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFollow indicates an expected call of RemoveFollow.
func (mr *MockDatabaseClientMockRecorder) RemoveFollow(follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFollow", reflect.TypeOf((*MockDatabaseClient)(nil).RemoveFollow), follow)
}

// RemoveLikePost mocks base method.
func (m *MockDatabaseClient) RemoveLikePost(likePost *model.LikePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLikePost", likePost)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLikePost indicates an expected call of RemoveLikePost.
func (mr *MockDatabaseClientMockRecorder) RemoveLikePost(likePost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLikePost", reflect.TypeOf((*MockDatabaseClient)(nil).RemoveLikePost), likePost)
}

// RemoveSuperlikePost mocks base method.
func (m *MockDatabaseClient) RemoveSuperlikePost(superlikePost *model.SuperlikePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSuperlikePost", superlikePost)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSuperlikePost indicates an expected call of RemoveSuperlikePost.
func (mr *MockDatabaseClientMockRecorder) RemoveSuperlikePost(superlikePost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSuperlikePost", reflect.TypeOf((*MockDatabaseClient)(nil).RemoveSuperlikePost), superlikePost)
}
